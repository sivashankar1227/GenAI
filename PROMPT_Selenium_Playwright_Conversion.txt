PROMPT:

Instruction: 
       - Use Playwright typescript package, features and latest version 
       - [MANDATORY] Every method should have proper comments above method signature
	   - XServer running before executing playwright/test script
	   - Set either 'headless: true'
       - Do not provide any explanation or additional text
	-[REMEMBER] Use selectByVisibleText for dropdowns
       - [CRITICAL] use right locators starting id, name, class, link text and finally xpath

Context: 
You are an AI assistant to convert Selenium Java code to Playwright TypeScript code.
Selenium Java code to be converted is given below:

package week2.day1;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;
import io.github.bonigarcia.wdm.WebDriverManager;

public class CreateLead {
	
	public static void main(String[] args) {
			
		// Step 0) Setup the chromedriver using webdrivermanager software
		WebDriverManager.chromedriver().setup();
		
		// Step 1) Launch the chrome browser (Class Name -> ChromeDriver)
		ChromeDriver driver = new ChromeDriver();
		
		// Step 2) Load the URL (http://leaftaps.com/opentaps/control/main) -> get
		driver.get("http://leaftaps.com/opentaps");
		
		// Step 3) Maximize the chrome browser
		driver.manage().window().maximize();
		
		// Step 4) Find the username and type the value (DemoSalesManager)
		driver.findElement(By.id("username")).sendKeys("DemoSalesManager");
		
		// Step 5) Find the password and type the value (crmsfa)
		driver.findElement(By.id("password")).sendKeys("crmsfa");	
		
		// Step 6) Find the login button and click
		driver.findElement(By.className("decorativeSubmit")).click();
		
		// Step 7) Verify the title 
		String title = driver.getTitle();
		System.out.println(title);
		
		// Step 8) Click CRM/SFA link
		driver.findElement(By.linkText("CRM/SFA")).click();
		
		// Step 9) Click Create Lead Link
		driver.findElement(By.linkText("Create Lead")).click();
		
		// Step 10) Find the company name and type the company name
		driver.findElement(By.id("createLeadForm_companyName")).sendKeys("TestLeaf");
		
		// Step 11) Find the first name and type your name
		driver.findElement(By.id("createLeadForm_firstName")).sendKeys("Babu");

		// Step 12) Find the last name and type your name
		driver.findElement(By.id("createLeadForm_lastName")).sendKeys("Manickam");
		
		// Step 12 b) Select the Source dropdown with one of the visible text
		WebElement source = driver.findElement(By.id("createLeadForm_dataSourceId"));
		Select dd1 = new Select(source);
		dd1.selectByVisibleText("Employee");
		
		// Step 12 c) Select the marketing campaign with one of the value
		WebElement marketing = driver.findElement(By.id("createLeadForm_marketingCampaignId"));
		Select dd2 = new Select(marketing);
		dd2.selectByValue("9001");

		// Step 13) Click Create Lead Button
		driver.findElement(By.name("submitButton")).click();
		
		// Step 14) Print the new title
		title = driver.getTitle();
		System.out.println(title);
						
	}
}

Example:
import { test, expect } from "@playwright/test";

test('LeafTaps Login', async ({ page }) => {
  // Navigate to login page
  await page.goto("http://leaftaps.com/opentaps/control/main");
  await page.setViewportSize({ width: 1920, height: 1080 });

  // Enter username
  await page.fill("#username", "Demosalesmanager");

  // Enter password
  await page.fill("#password", "crmsfa");

  // Click Login
  await page.click(".decorativeSubmit");

  // Verify successful login by checking for CRM/SFA link
  await expect(page.locator("a:has-text('CRM/SFA')")).toBeVisible();

  console.log("✅ Login successful, CRM/SFA link is visible");
});

Tone: 
Professional mode with proper naming conventions and no hard coded values

Output:
Output code should be Playwright typescript

Persona:
It should be self explanatory in layman terms for all users to understand and use it